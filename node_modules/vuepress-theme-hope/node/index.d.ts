import { ThemeConfig, Theme } from '@vuepress/core';
import { LocaleData } from '@vuepress/shared';
import { ThemeData } from '@vuepress/plugin-theme-data';
import { CommentOptions } from 'vuepress-plugin-comment2';
import { CopyCodeOptions } from 'vuepress-plugin-copy-code2';
import { FeedOptions } from 'vuepress-plugin-feed2';
import { MarkdownEnhanceOptions } from 'vuepress-plugin-md-enhance';
import { PhotoSwipeOptions } from 'vuepress-plugin-photo-swipe';
import { SitemapOptions } from 'vuepress-plugin-sitemap2';
import { SeoOptions } from 'vuepress-plugin-seo2';
import { ActiveHeaderLinksPluginOptions } from '@vuepress/plugin-active-header-links';
import { ContainerPluginOptions } from '@vuepress/plugin-container';
import { GitPluginPageData, GitPluginOptions } from '@vuepress/plugin-git';
import { BasePageFrontMatter } from '@mr-hope/vuepress-shared';

/**
 * Base nav item, displayed as text
 */
interface NavItem {
    text: string;
    icon?: string;
    ariaLabel?: string;
}
/**
 * Base nav group, has nav items children
 */
interface NavGroup<T> extends NavItem {
    prefix?: string;
    link?: string;
    children: T[];
}
/**
 * Props for `<NavLink>`
 */
interface NavLink extends NavItem {
    link: string;
    rel?: string;
    target?: string;
}
/**
 * Navbar types
 */
declare type NavbarItem = NavLink;
declare type NavbarGroup = NavGroup<NavbarGroup | NavbarItem | string>;
declare type NavbarConfig = (NavbarItem | NavbarGroup | string)[];
declare type ResolvedNavbarItem = NavbarItem | NavGroup<ResolvedNavbarItem>;

/**
 * Sidebar types
 */
declare type SidebarPageItem = NavLink;
interface SidebarGroupItem extends NavGroup<SidebarPageItem | SidebarGroupItem | string> {
    prefix?: string;
    collapsable?: boolean;
}
declare type SidebarItem = SidebarPageItem | SidebarGroupItem | string;
declare type SidebarConfigArray = SidebarItem[];
declare type SidebarConfigObject = Record<string, SidebarConfigArray>;
declare type SidebarConfig = SidebarConfigArray | SidebarConfigObject;
interface ResolvedSidebarHeaderItem extends SidebarPageItem {
    type: "heading";
    children: ResolvedSidebarHeaderItem[];
}
interface ResolvedSidebarPageItem extends SidebarPageItem {
    type: "page";
    children: ResolvedSidebarHeaderItem[];
}
interface ResolvedSidebarGroupItem extends SidebarGroupItem {
    type: "group";
    children: ResolvedSidebarItem[];
}
declare type ResolvedSidebarItem = ResolvedSidebarHeaderItem | ResolvedSidebarPageItem | ResolvedSidebarGroupItem;

/**
 * 页脚配置
 *
 * Footer Settings
 */
interface HopeFooterConfig {
    /**
     * 页脚的默认内容，可输入 HTMLString
     *
     * The default content for the footer, can accept HTMLString.
     */
    content?: string;
    /**
     * 默认的版权信息，设置为 `false` 来默认禁用它
     *
     * The default copyright info, set it to `false` to disable it by default.
     */
    copyright?: string | false;
    /**
     * 是否默认显示页脚
     *
     * Whether to display footer by default
     *
     * @default false
     */
    display?: boolean;
}

/**
 * 合法的媒体
 *
 * media you can choose
 */
declare type MediaType = "Baidu" | "Bitbucket" | "Dingding" | "Discord" | "Dribbble" | "Email" | "Evernote" | "Facebook" | "Flipboard" | "Gitee" | "Github" | "Gitlab" | "Gmail" | "Instagram" | "Lines" | "Linkedin" | "Pinterest" | "Pocket" | "QQ" | "Qzone" | "Reddit" | "Rss" | "Steam" | "Twitter" | "Wechat" | "Weibo" | "Whatsapp" | "Youtube" | "Zhihu";
declare type MediaLinksConfig = Record<MediaType, string>;

/**
 * 博客选项
 *
 * Blog configuration
 */
interface HopeBlogOptions {
    /**
     * 博主名称
     *
     * Name of the Blogger, default is author
     */
    name?: string;
    /**
     * 博主头像，应为绝对路径
     *
     * Blogger avator, must be an absolute path
     */
    avatar?: string;
    /**
     * 博主的个人介绍地址
     *
     * Intro page about blogger
     */
    intro?: string;
    /**
     * 媒体链接配置
     *
     * Media links configuration
     *
     * E.g.
     *
     * ```js
     * {
     *   QQ: "http://wpa.qq.com/msgrd?v=3&uin=1178522294&site=qq&menu=yes",
     *   Qzone: "https://1178522294.qzone.qq.com/",
     *   Gmail: "mailto:zhangbowang1998@gmail.com",
     *   Zhihu: "https://www.zhihu.com/people/mister-hope",
     *   Steam: "https://steamcommunity.com/id/Mr-Hope/",
     *   Weibo: "https://weibo.com/misterhope",
     * }
     * ```
     */
    links?: Record<MediaType, string>;
    /**
     * 是否剪裁头像为圆形形状
     *
     * Whether cliping the avatar with round shape
     *
     * @default true
     */
    roundAvatar?: boolean;
    /**
     * 是否在侧边栏展示博主信息
     *
     * Whether to display blogger info in sidebar
     *
     * @default 'none'
     */
    sidebarDisplay?: "mobile" | "none" | "always";
    /**
     * 时间轴自定义文字
     *
     * Custom text for timeline
     *
     * @default 'Yesterday once more'
     */
    timeline?: string;
    /**
     * 每页的文章数量
     *
     * Article number per page
     *
     * @default 10
     */
    perPage?: number;
}

interface HopeThemeLocaleData extends LocaleData {
    /**
     * Home path of current locale
     *
     * Used as the link of back-to-home and navbar logo
     */
    home?: string;
    /**
     * Default author
     */
    author?: string;
    /**
     * Navbar config
     *
     * Set to `false` to disable navbar in current locale
     */
    navbar?: false | NavbarConfig;
    /**
     * Navbar logo config
     *
     * Logo to display in navbar
     */
    logo?: null | string;
    /**
     * Navbar repository config
     *
     * Used for the repository link of navbar
     */
    repo?: null | string;
    /**
     * Navbar repository config
     *
     * Used for the repository text of navbar
     */
    repoLabel?: string;
    /**
     * Navbar language selection config
     *
     * Text of the language selection dropdown
     */
    selectLanguageText?: string;
    /**
     * Navbar language selection config
     *
     * Aria label of of the language selection dropdown
     */
    selectLanguageAriaLabel?: string;
    /**
     * Navbar language selection config
     *
     * Language name of current locale
     *
     * Displayed inside the language selection dropdown
     */
    selectLanguageName?: string;
    /**
     * Sidebar config
     *
     * Set to `false` to disable sidebar in current locale
     */
    sidebar?: "auto" | false | SidebarConfig;
    /**
     * Sidebar depth
     *
     * - Set to `0` to disable all levels
     * - Set to `1` to include `<h2>`
     * - Set to `2` to include `<h2>` and `<h3>`
     * - ...
     *
     * The max value depends on which headers you have extracted
     * via `markdown.extractHeaders.level`.
     *
     * The default value of `markdown.extractHeaders.level` is `[2, 3]`,
     * so the default max value of `sidebarDepth` is `2`
     */
    sidebarDepth?: number;
    /**
     * Page meta - edit link config
     *
     * Whether to show "Edit this page" or not
     */
    editLink?: boolean;
    /**
     * Page meta - edit link config
     *
     * The text to replace the default "Edit this page"
     */
    editLinkText?: string;
    /**
     * Page meta - edit link config
     *
     * Pattern of edit link
     *
     * @example ':repo/edit/:branch/:path'
     */
    editLinkPattern?: string;
    /**
     * Page meta - edit link config
     *
     * Use `repo` config by default
     *
     * Set this config if your docs is placed in a different repo
     */
    docsRepo?: string;
    /**
     * Page meta - edit link config
     *
     * Set this config if the branch of your docs is not 'master'
     */
    docsBranch?: string;
    /**
     * Page meta - edit link config
     *
     * Set this config if your docs is placed in sub dir of your `docsRepo`
     */
    docsDir?: string;
    /**
     * Page meta - last updated config
     *
     * Whether to show "Last Updated" or not
     */
    lastUpdated?: boolean;
    /**
     * Page meta - last updated config
     *
     * The text to replace the default "Last Updated"
     */
    lastUpdatedText?: string;
    /**
     * Page meta - contributors config
     *
     * Whether to show "Contributors" or not
     */
    contributors?: boolean;
    /**
     * Page meta - contributors config
     *
     * The text to replace the default "Contributors"
     */
    contributorsText?: string;
    footer?: HopeFooterConfig;
    blog?: HopeBlogOptions | false;
    /**
     * Custom block config
     *
     * Default title of TIP custom block
     */
    tip?: string;
    /**
     * Custom block config
     *
     * Default title of WARNING custom block
     */
    warning?: string;
    /**
     * Custom block config
     *
     * Default title of DANGER custom block
     */
    danger?: string;
    /**
     * 404 page config
     *
     * Not Found messages for 404 page
     */
    notFound?: string[];
    /**
     * 404 page config
     *
     * Text of back-to-home link in 404 page
     */
    backToHome?: string;
    /**
     * sr-only message in `<OutboundLink>`
     */
    openInNewWindow?: string;
}
declare type HopeThemeData = ThemeData<HopeThemeLocaleData>;
declare type HopeThemeLocaleOptions = HopeThemeData;

interface HopeThemePluginsOptions {
    /**
     * Enable @vuepress/plugin-active-header-links or not
     */
    activeHeaderLinks?: boolean;
    /**
     * Enable @vuepress/plugin-back-to-top or not
     */
    backToTop?: boolean;
    /**
     * 评论插件配置
     * @see http://vuepress-theme-hope.github.io/comment/zh/config/
     *
     * Comment plugin options
     * @see http://vuepress-theme-hope.github.io/comment/config/
     */
    comment?: CommentOptions;
    /**
     * 代码复制插件配置
     * @see http://vuepress-theme-hope.github.io/copy-code/zh/config/
     *
     * code copy plugin options
     * @see http://vuepress-theme-hope.github.io/copy-code/config/
     */
    copyCode?: CopyCodeOptions | false;
    /**
     * Feed 插件配置
     * @see http://vuepress-theme-hope.github.io/feed/zh/config/
     *
     * Feed plugin options
     * @see http://vuepress-theme-hope.github.io/feed/config/
     */
    feed?: FeedOptions | false;
    /**
     * Markdown 增强插件配置
     * @see http://vuepress-theme-hope.github.io/md-enhance/zh/config/
     *
     * Markdown enhance plugin options
     * @see http://vuepress-theme-hope.github.io/md-enhance/config/
     */
    mdEnhance?: MarkdownEnhanceOptions | false;
    /**
     * 图片预览插件配置
     * @see http://vuepress-theme-hope.github.io/photo-swipe/zh/config/
     *
     * Photo Swipe plugin options
     * @see http://vuepress-theme-hope.github.io/photo-swipe/config/
     */
    photoSwipe?: PhotoSwipeOptions | false;
    /**
     * SEO 插件配置
     * @see http://vuepress-theme-hope.github.io/seo/zh/config/
     *
     * SEO plugin options
     * @see http://vuepress-theme-hope.github.io/seo/config/
     */
    seo?: SeoOptions | false;
    /**
     * Sitemap 插件配置
     * @see http://vuepress-theme-hope.github.io/sitemap/zh/config/
     *
     * Sitemap plugin options
     * @see http://vuepress-theme-hope.github.io/sitemap/config/
     */
    sitemap?: SitemapOptions | false;
    /**
     * Enable @vuepress/plugin-container or not
     */
    container?: {
        tip?: boolean;
        warning?: boolean;
        danger?: boolean;
        details?: boolean;
        codeGroup?: boolean;
        codeGroupItem?: boolean;
    };
    /**
     * Enable @vuepress/plugin-git or not
     */
    git?: boolean;
    /**
     * Enable @vuepress/plugin-medium-zoom or not
     */
    mediumZoom?: boolean;
    /**
     * Enable @vuepress/plugin-nprogress or not
     */
    nprogress?: boolean;
    /**
     * Enable @vuepress/plugin-prismjs or not
     */
    prismjs?: boolean;
}

interface HopeThemePageData extends GitPluginPageData {
    filePathRelative: string;
}
interface HopeThemePageFrontmatter extends BasePageFrontMatter {
    navbar?: boolean;
    pageClass?: string;
    medialinks?: MediaLinksConfig | false;
}
interface HopeThemeHomePageFrontmatter extends HopeThemePageFrontmatter {
    home: true;
    heroImage?: string;
    heroAlt?: string;
    heroText?: string | null;
    tagline?: string | null;
    actions?: {
        text: string;
        link: string;
        type?: "primary" | "secondary";
    }[];
    features?: {
        title: string;
        details: string;
    }[];
}
interface HopeThemeNormalPageFrontmatter extends HopeThemePageFrontmatter {
    home?: false;
    editLink?: boolean;
    lastUpdated?: boolean;
    contributors?: boolean;
    sidebar?: "auto" | false | SidebarConfig;
    sidebarDepth?: number;
    prev?: string | NavLink;
    next?: string | NavLink;
}

interface HopeThemeOptions extends ThemeConfig, HopeThemeLocaleOptions {
    /**
     * To avoid confusion with the root `plugins` option,
     * we use `themePlugins`
     */
    themePlugins?: HopeThemePluginsOptions;
}
declare const themeHope: Theme<HopeThemeOptions>;

/**
 * Assign default options to `themeConfig`
 */
declare const assignDefaultLocaleOptions: (localeOptions: HopeThemeLocaleOptions) => void;

/**
 * Resolve options for @vuepress/plugin-container
 *
 * For custom containers default title
 */
declare const resolveContainerPluginOptions: (themePlugins: HopeThemePluginsOptions, localeOptions: HopeThemeData, type: "tip" | "warning" | "danger") => ContainerPluginOptions | boolean;
/**
 * Resolve options for @vuepress/plugin-container
 *
 * For details container
 */
declare const resolveContainerPluginOptionsForDetails: (themePlugins: HopeThemePluginsOptions) => ContainerPluginOptions | boolean;
/**
 * Resolve options for @vuepress/plugin-container
 *
 * For code-group container
 */
declare const resolveContainerPluginOptionsForCodeGroup: (themePlugins: HopeThemePluginsOptions) => ContainerPluginOptions | boolean;
/**
 * Resolve options for @vuepress/plugin-container
 *
 * For code-group-item block
 */
declare const resolveContainerPluginOptionsForCodeGroupItem: (themePlugins: HopeThemePluginsOptions) => ContainerPluginOptions | boolean;
/**
 * Resolve options for @vuepress/plugin-active-header-links
 */
declare const resolveActiveHeaderLinksPluginOptions: (themePlugins: HopeThemePluginsOptions) => ActiveHeaderLinksPluginOptions | boolean;
/**
 * Resolve options for @vuepress/plugin-git
 */
declare const resolveGitPluginOptions: (themePlugins: HopeThemePluginsOptions, localeOptions: HopeThemeLocaleOptions) => GitPluginOptions | boolean;

export default themeHope;
export { HopeFooterConfig, HopeThemeData, HopeThemeHomePageFrontmatter, HopeThemeLocaleData, HopeThemeLocaleOptions, HopeThemeNormalPageFrontmatter, HopeThemeOptions, HopeThemePageData, HopeThemePageFrontmatter, HopeThemePluginsOptions, MediaLinksConfig, MediaType, NavGroup, NavItem, NavLink, NavbarConfig, NavbarGroup, NavbarItem, ResolvedNavbarItem, ResolvedSidebarGroupItem, ResolvedSidebarHeaderItem, ResolvedSidebarItem, ResolvedSidebarPageItem, SidebarConfig, SidebarConfigArray, SidebarConfigObject, SidebarGroupItem, SidebarItem, SidebarPageItem, assignDefaultLocaleOptions, resolveActiveHeaderLinksPluginOptions, resolveContainerPluginOptions, resolveContainerPluginOptionsForCodeGroup, resolveContainerPluginOptionsForCodeGroupItem, resolveContainerPluginOptionsForDetails, resolveGitPluginOptions, themeHope };
